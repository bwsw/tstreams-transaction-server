/**
 * Generated by Scrooge
 *   version: 4.16.0
 *   rev: 0201cac9fdd6188248d42da91fd14c87744cc4a5
 *   built at: 20170421-124523
 */
package com.bwsw.tstreamstransactionserver.rpc

import com.twitter.scrooge.{
  LazyTProtocol,
  HasThriftStructCodec3,
  TFieldBlob,
  ThriftService,
  ThriftStruct,
  ThriftStructCodec,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftResponse,
  ThriftUtil,
  ToThriftService
}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait TransactionDataService[+MM[_]] extends ThriftService {
  
  def putTransactionData(streamID: Int, partition: Int, transaction: Long, data: Seq[ByteBuffer] = Seq[ByteBuffer](), from: Int): MM[Boolean]
  
  def getTransactionData(streamID: Int, partition: Int, transaction: Long, from: Int, to: Int): MM[Seq[ByteBuffer]]
}


object TransactionDataService { self =>

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  object PutTransactionData extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransactionData_args")
      val StreamIDField = new TField("streamID", TType.I32, 1)
      val StreamIDFieldManifest = implicitly[Manifest[Int]]
      val PartitionField = new TField("partition", TType.I32, 2)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
      val TransactionField = new TField("transaction", TType.I64, 3)
      val TransactionFieldManifest = implicitly[Manifest[Long]]
      val DataField = new TField("data", TType.LIST, 4)
      val DataFieldManifest = implicitly[Manifest[Seq[ByteBuffer]]]
      val FromField = new TField("from", TType.I32, 5)
      val FromFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamIDField,
          false,
          false,
          StreamIDFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TransactionField,
          false,
          false,
          TransactionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          DataField,
          false,
          false,
          DataFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[ByteBuffer]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          FromField,
          false,
          false,
          FromFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          streamID =
            {
              val field = original.streamID
              field
            },
          partition =
            {
              val field = original.partition
              field
            },
          transaction =
            {
              val field = original.transaction
              field
            },
          data =
            {
              val field = original.data
              field.map { field =>
                field
              }
            },
          from =
            {
              val field = original.from
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var streamID: Int = 0
        var partition: Int = 0
        var transaction: Long = 0L
        var data: Seq[ByteBuffer] = Seq[ByteBuffer]()
        var from: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.I32 =>
                    streamID = readStreamIDValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'streamID' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I64 =>
                    transaction = readTransactionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'transaction' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.LIST =>
                    data = readDataValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'data' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 5 =>
                _field.`type` match {
                  case TType.I32 =>
                    from = readFromValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          streamID,
          partition,
          transaction,
          data,
          from,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        streamID: Int,
        partition: Int,
        transaction: Long,
        data: Seq[ByteBuffer] = Seq[ByteBuffer](),
        from: Int
      ): Args =
        new Args(
          streamID,
          partition,
          transaction,
          data,
          from
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple5[Int, Int, Long, Seq[ByteBuffer], Int]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readStreamIDValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeStreamIDField(streamID_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamIDField)
        writeStreamIDValue(streamID_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamIDValue(streamID_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(streamID_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
      @inline private def readTransactionValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeTransactionField(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionField)
        writeTransactionValue(transaction_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionValue(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(transaction_item)
      }
    
      @inline private def readDataValue(_iprot: TProtocol): Seq[ByteBuffer] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[ByteBuffer](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              _iprot.readBinary()
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeDataField(data_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DataField)
        writeDataValue(data_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDataValue(data_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRING, data_item.size))
        data_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = data_item.size
            while (_i < _size) {
              val data_item_element = data_item(_i)
              _oprot.writeBinary(data_item_element)
              _i += 1
            }
          case _ =>
            data_item.foreach { data_item_element =>
              _oprot.writeBinary(data_item_element)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readFromValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeFromField(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(FromField)
        writeFromValue(from_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeFromValue(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(from_item)
      }
    
    
    }
    
    class Args(
        val streamID: Int,
        val partition: Int,
        val transaction: Long,
        val data: Seq[ByteBuffer],
        val from: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product5[Int, Int, Long, Seq[ByteBuffer], Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        streamID: Int,
        partition: Int,
        transaction: Long,
        data: Seq[ByteBuffer] = Seq[ByteBuffer](),
        from: Int
      ) = this(
        streamID,
        partition,
        transaction,
        data,
        from,
        Map.empty
      )
    
      def _1 = streamID
      def _2 = partition
      def _3 = transaction
      def _4 = data
      def _5 = from
    
      def toTuple: _root_.scala.Tuple5[Int, Int, Long, Seq[ByteBuffer], Int] = {
        (
          streamID,
          partition,
          transaction,
          data,
          from
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        writeStreamIDField(streamID, _oprot)
        writePartitionField(partition, _oprot)
        writeTransactionField(transaction, _oprot)
        if (data ne null) writeDataField(data, _oprot)
        writeFromField(from, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        streamID: Int = this.streamID,
        partition: Int = this.partition,
        transaction: Long = this.transaction,
        data: Seq[ByteBuffer] = this.data,
        from: Int = this.from,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          streamID,
          partition,
          transaction,
          data,
          from,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 5
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.streamID
        case 1 => this.partition
        case 2 => this.transaction
        case 3 => this.data
        case 4 => this.from
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransactionData_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[com.bwsw.tstreamstransactionserver.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                com.bwsw.tstreamstransactionserver.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[com.bwsw.tstreamstransactionserver.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): com.bwsw.tstreamstransactionserver.rpc.ServerException = {
        com.bwsw.tstreamstransactionserver.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: com.bwsw.tstreamstransactionserver.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: com.bwsw.tstreamstransactionserver.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[com.bwsw.tstreamstransactionserver.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[com.bwsw.tstreamstransactionserver.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Nothing
    type ServiceType = Nothing
    type ServiceIfaceServiceType = Nothing

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType = ???
    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name: String = "putTransactionData"
    val serviceName: String = "TransactionDataService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val putTransactionData$args = PutTransactionData.Args
  type putTransactionData$args = PutTransactionData.Args

  val putTransactionData$result = PutTransactionData.Result
  type putTransactionData$result = PutTransactionData.Result

  object GetTransactionData extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTransactionData_args")
      val StreamIDField = new TField("streamID", TType.I32, 1)
      val StreamIDFieldManifest = implicitly[Manifest[Int]]
      val PartitionField = new TField("partition", TType.I32, 2)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
      val TransactionField = new TField("transaction", TType.I64, 3)
      val TransactionFieldManifest = implicitly[Manifest[Long]]
      val FromField = new TField("from", TType.I32, 4)
      val FromFieldManifest = implicitly[Manifest[Int]]
      val ToField = new TField("to", TType.I32, 5)
      val ToFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamIDField,
          false,
          false,
          StreamIDFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TransactionField,
          false,
          false,
          TransactionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          FromField,
          false,
          false,
          FromFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ToField,
          false,
          false,
          ToFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          streamID =
            {
              val field = original.streamID
              field
            },
          partition =
            {
              val field = original.partition
              field
            },
          transaction =
            {
              val field = original.transaction
              field
            },
          from =
            {
              val field = original.from
              field
            },
          to =
            {
              val field = original.to
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var streamID: Int = 0
        var partition: Int = 0
        var transaction: Long = 0L
        var from: Int = 0
        var to: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.I32 =>
                    streamID = readStreamIDValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'streamID' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I64 =>
                    transaction = readTransactionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'transaction' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.I32 =>
                    from = readFromValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 5 =>
                _field.`type` match {
                  case TType.I32 =>
                    to = readToValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'to' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          streamID,
          partition,
          transaction,
          from,
          to,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        streamID: Int,
        partition: Int,
        transaction: Long,
        from: Int,
        to: Int
      ): Args =
        new Args(
          streamID,
          partition,
          transaction,
          from,
          to
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple5[Int, Int, Long, Int, Int]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readStreamIDValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeStreamIDField(streamID_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamIDField)
        writeStreamIDValue(streamID_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamIDValue(streamID_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(streamID_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
      @inline private def readTransactionValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeTransactionField(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionField)
        writeTransactionValue(transaction_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionValue(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(transaction_item)
      }
    
      @inline private def readFromValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeFromField(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(FromField)
        writeFromValue(from_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeFromValue(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(from_item)
      }
    
      @inline private def readToValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeToField(to_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ToField)
        writeToValue(to_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeToValue(to_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(to_item)
      }
    
    
    }
    
    class Args(
        val streamID: Int,
        val partition: Int,
        val transaction: Long,
        val from: Int,
        val to: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product5[Int, Int, Long, Int, Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        streamID: Int,
        partition: Int,
        transaction: Long,
        from: Int,
        to: Int
      ) = this(
        streamID,
        partition,
        transaction,
        from,
        to,
        Map.empty
      )
    
      def _1 = streamID
      def _2 = partition
      def _3 = transaction
      def _4 = from
      def _5 = to
    
      def toTuple: _root_.scala.Tuple5[Int, Int, Long, Int, Int] = {
        (
          streamID,
          partition,
          transaction,
          from,
          to
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        writeStreamIDField(streamID, _oprot)
        writePartitionField(partition, _oprot)
        writeTransactionField(transaction, _oprot)
        writeFromField(from, _oprot)
        writeToField(to, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        streamID: Int = this.streamID,
        partition: Int = this.partition,
        transaction: Long = this.transaction,
        from: Int = this.from,
        to: Int = this.to,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          streamID,
          partition,
          transaction,
          from,
          to,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 5
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.streamID
        case 1 => this.partition
        case 2 => this.transaction
        case 3 => this.from
        case 4 => this.to
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Seq[ByteBuffer]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTransactionData_result")
      val SuccessField = new TField("success", TType.LIST, 0)
      val SuccessFieldManifest = implicitly[Manifest[Seq[ByteBuffer]]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[com.bwsw.tstreamstransactionserver.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[ByteBuffer]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  field
                }
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                com.bwsw.tstreamstransactionserver.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Seq[ByteBuffer]] = _root_.scala.None
        var error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.LIST =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Seq[ByteBuffer]] = _root_.scala.None,
        error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Seq[ByteBuffer]], Option[com.bwsw.tstreamstransactionserver.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Seq[ByteBuffer] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[ByteBuffer](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              _iprot.readBinary()
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRING, success_item.size))
        success_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = success_item.size
            while (_i < _size) {
              val success_item_element = success_item(_i)
              _oprot.writeBinary(success_item_element)
              _i += 1
            }
          case _ =>
            success_item.foreach { success_item_element =>
              _oprot.writeBinary(success_item_element)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): com.bwsw.tstreamstransactionserver.rpc.ServerException = {
        com.bwsw.tstreamstransactionserver.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: com.bwsw.tstreamstransactionserver.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: com.bwsw.tstreamstransactionserver.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Seq[ByteBuffer]],
        val error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Seq[ByteBuffer]] with ThriftStruct
      with _root_.scala.Product2[Option[Seq[ByteBuffer]], Option[com.bwsw.tstreamstransactionserver.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Seq[ByteBuffer]] = _root_.scala.None,
        error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Seq[ByteBuffer]], Option[com.bwsw.tstreamstransactionserver.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Seq[ByteBuffer]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Seq[ByteBuffer]] = this.success,
        error: _root_.scala.Option[com.bwsw.tstreamstransactionserver.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Nothing
    type ServiceType = Nothing
    type ServiceIfaceServiceType = Nothing

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType = ???
    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name: String = "getTransactionData"
    val serviceName: String = "TransactionDataService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val getTransactionData$args = GetTransactionData.Args
  type getTransactionData$args = GetTransactionData.Args

  val getTransactionData$result = GetTransactionData.Result
  type getTransactionData$result = GetTransactionData.Result


}