/**
 * Generated by Scrooge
 *   version: 4.16.0
 *   rev: 0201cac9fdd6188248d42da91fd14c87744cc4a5
 *   built at: 20170421-124523
 */
package com.bwsw.tstreamstransactionserver.rpc

import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object ConsumerTransaction extends ThriftStructCodec3[ConsumerTransaction] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("ConsumerTransaction")
  val StreamField = new TField("stream", TType.I32, 1)
  val StreamFieldManifest = implicitly[Manifest[Int]]
  val PartitionField = new TField("partition", TType.I32, 2)
  val PartitionFieldManifest = implicitly[Manifest[Int]]
  val TransactionIDField = new TField("transactionID", TType.I64, 3)
  val TransactionIDFieldManifest = implicitly[Manifest[Long]]
  val NameField = new TField("name", TType.STRING, 4)
  val NameFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      StreamField,
      false,
      true,
      StreamFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PartitionField,
      false,
      true,
      PartitionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TransactionIDField,
      false,
      true,
      TransactionIDFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NameField,
      false,
      true,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ConsumerTransaction): Unit = {
    if (_item.name == null) throw new TProtocolException("Required field name cannot be null")
  }

  def withoutPassthroughFields(original: ConsumerTransaction): ConsumerTransaction =
    new Immutable(
      stream =
        {
          val field = original.stream
          field
        },
      partition =
        {
          val field = original.partition
          field
        },
      transactionID =
        {
          val field = original.transactionID
          field
        },
      name =
        {
          val field = original.name
          field
        }
    )

  override def encode(_item: ConsumerTransaction, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): ConsumerTransaction = {

    var stream: Int = 0
    var _got_stream = false
    var partition: Int = 0
    var _got_partition = false
    var transactionID: Long = 0L
    var _got_transactionID = false
    var nameOffset: Int = -1
    var _got_name = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                stream = readStreamValue(_iprot)
                _got_stream = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
    
                partition = readPartitionValue(_iprot)
                _got_partition = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
    
                transactionID = readTransactionIDValue(_iprot)
                _got_transactionID = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'transactionID' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_stream) throw new TProtocolException("Required field 'stream' was not found in serialized data for struct ConsumerTransaction")
    if (!_got_partition) throw new TProtocolException("Required field 'partition' was not found in serialized data for struct ConsumerTransaction")
    if (!_got_transactionID) throw new TProtocolException("Required field 'transactionID' was not found in serialized data for struct ConsumerTransaction")
    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct ConsumerTransaction")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      stream,
      partition,
      transactionID,
      nameOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): ConsumerTransaction =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): ConsumerTransaction = {
    var stream: Int = 0
    var _got_stream = false
    var partition: Int = 0
    var _got_partition = false
    var transactionID: Long = 0L
    var _got_transactionID = false
    var name: String = null
    var _got_name = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                stream = readStreamValue(_iprot)
                _got_stream = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                partition = readPartitionValue(_iprot)
                _got_partition = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                transactionID = readTransactionIDValue(_iprot)
                _got_transactionID = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'transactionID' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                name = readNameValue(_iprot)
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_stream) throw new TProtocolException("Required field 'stream' was not found in serialized data for struct ConsumerTransaction")
    if (!_got_partition) throw new TProtocolException("Required field 'partition' was not found in serialized data for struct ConsumerTransaction")
    if (!_got_transactionID) throw new TProtocolException("Required field 'transactionID' was not found in serialized data for struct ConsumerTransaction")
    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct ConsumerTransaction")
    new Immutable(
      stream,
      partition,
      transactionID,
      name,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    stream: Int,
    partition: Int,
    transactionID: Long,
    name: String
  ): ConsumerTransaction =
    new Immutable(
      stream,
      partition,
      transactionID,
      name
    )

  def unapply(_item: ConsumerTransaction): _root_.scala.Option[_root_.scala.Tuple4[Int, Int, Long, String]] = _root_.scala.Some(_item.toTuple)


  @inline private def readStreamValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeStreamField(stream_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StreamField)
    writeStreamValue(stream_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStreamValue(stream_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(stream_item)
  }

  @inline private def readPartitionValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PartitionField)
    writePartitionValue(partition_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(partition_item)
  }

  @inline private def readTransactionIDValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeTransactionIDField(transactionID_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TransactionIDField)
    writeTransactionIDValue(transactionID_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTransactionIDValue(transactionID_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(transactionID_item)
  }

  @inline private def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }


  object Immutable extends ThriftStructCodec3[ConsumerTransaction] {
    override def encode(_item: ConsumerTransaction, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): ConsumerTransaction = ConsumerTransaction.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[ConsumerTransaction] = ConsumerTransaction.metaData
  }

  /**
   * The default read-only implementation of ConsumerTransaction.  You typically should not need to
   * directly reference this class; instead, use the ConsumerTransaction.apply method to construct
   * new instances.
   */
  class Immutable(
      val stream: Int,
      val partition: Int,
      val transactionID: Long,
      val name: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ConsumerTransaction {
    def this(
      stream: Int,
      partition: Int,
      transactionID: Long,
      name: String
    ) = this(
      stream,
      partition,
      transactionID,
      name,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val stream: Int,
      val partition: Int,
      val transactionID: Long,
      nameOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ConsumerTransaction {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val name: String =
      if (nameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, nameOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the ConsumerTransaction trait with additional state or
   * behavior and implement the read-only methods from ConsumerTransaction using an underlying
   * instance.
   */
  trait Proxy extends ConsumerTransaction {
    protected def _underlying_ConsumerTransaction: ConsumerTransaction
    override def stream: Int = _underlying_ConsumerTransaction.stream
    override def partition: Int = _underlying_ConsumerTransaction.partition
    override def transactionID: Long = _underlying_ConsumerTransaction.transactionID
    override def name: String = _underlying_ConsumerTransaction.name
    override def _passthroughFields = _underlying_ConsumerTransaction._passthroughFields
  }
}

trait ConsumerTransaction
  extends ThriftStruct
  with _root_.scala.Product4[Int, Int, Long, String]
  with HasThriftStructCodec3[ConsumerTransaction]
  with java.io.Serializable
{
  import ConsumerTransaction._

  def stream: Int
  def partition: Int
  def transactionID: Long
  def name: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = stream
  def _2 = partition
  def _3 = transactionID
  def _4 = name

  def toTuple: _root_.scala.Tuple4[Int, Int, Long, String] = {
    (
      stream,
      partition,
      transactionID,
      name
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeStreamValue(stream, _oprot)
                _root_.scala.Some(ConsumerTransaction.StreamField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writePartitionValue(partition, _oprot)
                _root_.scala.Some(ConsumerTransaction.PartitionField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeTransactionIDValue(transactionID, _oprot)
                _root_.scala.Some(ConsumerTransaction.TransactionIDField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (name ne null) {
                writeNameValue(name, _oprot)
                _root_.scala.Some(ConsumerTransaction.NameField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): ConsumerTransaction = {
    var stream: Int = this.stream
    var partition: Int = this.partition
    var transactionID: Long = this.transactionID
    var name: String = this.name
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        stream = readStreamValue(_blob.read)
      case 2 =>
        partition = readPartitionValue(_blob.read)
      case 3 =>
        transactionID = readTransactionIDValue(_blob.read)
      case 4 =>
        name = readNameValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      stream,
      partition,
      transactionID,
      name,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): ConsumerTransaction = {
    var stream: Int = this.stream
    var partition: Int = this.partition
    var transactionID: Long = this.transactionID
    var name: String = this.name

    _fieldId match {
      case 1 =>
        stream = 0
      case 2 =>
        partition = 0
      case 3 =>
        transactionID = 0L
      case 4 =>
        name = null
      case _ =>
    }
    new Immutable(
      stream,
      partition,
      transactionID,
      name,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetStream: ConsumerTransaction = unsetField(1)

  def unsetPartition: ConsumerTransaction = unsetField(2)

  def unsetTransactionID: ConsumerTransaction = unsetField(3)

  def unsetName: ConsumerTransaction = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    ConsumerTransaction.validate(this)
    _oprot.writeStructBegin(Struct)
    writeStreamField(stream, _oprot)
    writePartitionField(partition, _oprot)
    writeTransactionIDField(transactionID, _oprot)
    if (name ne null) writeNameField(name, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    stream: Int = this.stream,
    partition: Int = this.partition,
    transactionID: Long = this.transactionID,
    name: String = this.name,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): ConsumerTransaction =
    new Immutable(
      stream,
      partition,
      transactionID,
      name,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ConsumerTransaction]

  private def _equals(x: ConsumerTransaction, y: ConsumerTransaction): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[ConsumerTransaction]) &&
      _passthroughFields == other.asInstanceOf[ConsumerTransaction]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.stream
    case 1 => this.partition
    case 2 => this.transactionID
    case 3 => this.name
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ConsumerTransaction"

  def _codec: ThriftStructCodec3[ConsumerTransaction] = ConsumerTransaction
}